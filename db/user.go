package db

import (
	_ "github.com/go-sql-driver/mysql"
	"JP-go-server/models"

	"database/sql"
			)

//user的数据库调用

//将新注册的用户数据写入数据库
func CreatUser(user models.User) error{
	//对密码进行加密存储
	//pwd := Cipher(user.UserPass)
	stmt, err := dbConn.Prepare("INSERT INTO user " +
		"(username,userpass,usernickname,usersex,userbirthday," +
		"userphone,useremail,userhomeplace,useraddress,userimgurl) " +
		"VALUES (?,?,?,?,?,?,?,?,?,?)")

	if err != nil {
		return err
	}

	_, err = stmt.Exec(user.UserName,user.UserPass,user.UserNickname,
		user.UserSex,user.UserBirthday,user.UserPhone,user.UserEmail,
		user.UserHomeplace,user.UserAddress,user.UserImgurl)

	if err != nil {
		return err
	}

	defer stmt.Close()
	return nil
}

//根据用户名更新用户数据
func UpdateUser(user models.User) error{

	userTemp, err := GetUser(user.UserName)
	if err != nil {
		return err
	}
	//todo：revise by reflect
	/*old := reflect.ValueOf(&userTemp).Elem()
	new := reflect.ValueOf(&user).Elem()
	count := old.NumField()
	for i :=  0; i < count; i++ {
		newValue := new.Field(i)
		if newValue.String() == "" {
			index := []int{i}
			new.FieldByIndex(index).SetString(old.Field(i).String())
		}
	}
	fmt.Println(user)*/

	if user.UserNickname == "" {
		user.UserNickname = userTemp.UserNickname
	}
	if user.UserSex == "" {
		user.UserSex = userTemp.UserSex
	}
	if user.UserBirthday == "" {
		user.UserBirthday = userTemp.UserBirthday
	}
	if user.UserPhone == "" {
		user.UserPhone = userTemp.UserPhone
	}
	if user.UserEmail == "" {
		user.UserEmail = userTemp.UserEmail
	}
	if user.UserHomeplace == "" {
		user.UserHomeplace = userTemp.UserHomeplace
	}
	if user.UserAddress == "" {
		user.UserAddress = userTemp.UserAddress
	}
	if user.UserImgurl == "" {
		user.UserImgurl = userTemp.UserImgurl
	}


	stmt, err := dbConn.Prepare("UPDATE user SET usernickname=?,usersex=?," +
		"userbirthday=?,userphone=?,useremail=?,userhomeplace=?,useraddress=?," +
		"userimgurl=? WHERE username=?")

	if err != nil {
		return err
	}

	_, err = stmt.Exec(user.UserNickname,user.UserSex,user.UserBirthday,
		user.UserPhone,user.UserEmail, user.UserHomeplace,user.UserAddress,
		user.UserImgurl,user.UserName)

	if err != nil {
		return err
	}

	defer stmt.Close()
	return nil
}

//根据用户名从数据库中读取用户信息
func GetUser(userName string) (*models.User, error) {
	stmt, err := dbConn.Prepare("SELECT " +
		"userid,username,userpass,usernickname,usersex,userbirthday," +
		"userphone,useremail,userhomeplace,useraddress,userimgurl " +
		"FROM user Where username = ? ")

	if err != nil {
		return nil, err
	}
	var userid,name,pass,nickname,sex,birthday,phone,email,homeplace,addr,imgurl string
	err = stmt.QueryRow(userName).Scan(
		&userid,&name,&pass,&nickname,&sex,&birthday,&phone,&email,&homeplace,&addr,&imgurl)

	if err != nil && err != sql.ErrNoRows {
		//fmt.Println("content err")
		return nil, err
	}

	if err == sql.ErrNoRows {
		//fmt.Println("sql err")
		return  nil, nil
	}

	userTemp := &models.User{
		UserName:name,
		UserPass:pass,
		UserNickname:nickname,
		UserSex:sex,
		UserBirthday:birthday,
		UserPhone:phone,
		UserEmail:email,
		UserHomeplace:homeplace,
		UserAddress:addr,
		UserImgurl:imgurl,
		UserId:userid,
	}


	defer stmt.Close()
	return userTemp, nil
}

//根据用户名获取数据库生成的用户id
//todo：id is generated by db,should be generated by hash
func GetUserID(userName string) (string, error) {
	stmt, err := dbConn.Prepare("SELECT userid FROM user Where username = ? ")
	if err != nil {
		return "", err
	}
	var userId string
	err = stmt.QueryRow(userName).Scan(&userId)
	if err != nil && err != sql.ErrNoRows {
		//fmt.Println("content err")
		return "", err
	}

	if err == sql.ErrNoRows {
		//fmt.Println("sql err")
		return  "", nil
	}
	defer stmt.Close()
	return userId, nil
}

//根据用户名查询用户是否在线
func IsOnline(userName string) (bool,error){
	stmt, err := dbConn.Prepare("SELECT online FROM user Where username = ? ")
	if err != nil {
		return false,err
	}
	var online bool
	err = stmt.QueryRow(userName).Scan(&online)
	if err != nil && err != sql.ErrNoRows {
		//fmt.Println("content err")
		return false, err
	}

	if err == sql.ErrNoRows {
		//fmt.Println("sql err")
		return  false, nil
	}
	defer stmt.Close()
	return online, nil
}

//用户在线状态调整
func StateAdjust(userName string,state bool) error {
	stmt, err := dbConn.Prepare("UPDATE user SET online=? Where username = ? ")
	if err != nil {
		return err
	}

	_, err = stmt.Exec(state,userName)
	if err != nil{
		//fmt.Println("content err")
		return  err
	}


	defer stmt.Close()
	return  nil
}

//登陆过程的进展
func LogIn(userName string) (string,bool, error){
	online,err := IsOnline(userName)
	if err != nil{
		return "can't get state",false,err
	}
	if online {
		return "user has onlined",false,nil
	} else {
		err = StateAdjust(userName,true)
		return "login success",true,nil
	}
}

//登出过程的进展
func LogOut(userName string) (string, bool, error){
	online,err := IsOnline(userName)
	if err != nil{
		return "can't get state",false,err
	}
	if !online {
		return "user hasn't onlined",false,nil
	} else {
		err = StateAdjust(userName,false)
		return "logout success",true,nil
	}
}

